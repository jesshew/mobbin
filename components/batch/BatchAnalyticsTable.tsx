import React from 'react';
import { SimplifiedPromptBatchRecord } from "@/types/BatchSummaries";
import { PROMPT_TYPE_TITLES, PROMPT_TYPE_ORDER } from './types';
import { Badge } from '@/components/ui/badge';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { EXTRACTION_CONCURRENCY, MOONDREAM_CONCURRENCY, VALIDATION_CONCURRENCY } from '@/lib/constants';

interface BatchAnalyticsTableProps {
  promptSummaryMap: Map<string, SimplifiedPromptBatchRecord>;
}

export const BatchAnalyticsTable: React.FC<BatchAnalyticsTableProps> = ({ 
  promptSummaryMap 
}) => {
  // Get concurrency values for the relevant prompt types
  const concurrencyMap = getConcurrencyMap();

  return (
    <div className="space-y-4">
      <div className="overflow-x-auto rounded-lg border shadow-sm">
        <table className="min-w-full divide-y divide-gray-200 text-sm">
          <thead className="bg-muted/50">
            <tr>
              <TableHead>
                <TooltipMetric 
                  label="Type"
                  description="The type of prompt and AI model used in this processing step"
                />
              </TableHead>
              <TableHead>
                <TooltipMetric 
                  label="Count"
                  description="Number of times this prompt/model was executed in the batch"
                />
              </TableHead>
              <TableHead>
                <TooltipMetric 
                  label="Total Time (s)"
                  description="Total time taken (in seconds) for all executions of this prompt type"
                />
              </TableHead>
              <TableHead>
                <TooltipMetric 
                  label="Avg Time (s)"
                  description="Average time per prompt execution (in seconds)"
                />
              </TableHead>
              <TableHead>
                <TooltipMetric 
                  label="Concurrency"
                  description="Maximum number of parallel operations for this step (limited by API rate limits)"
                />
              </TableHead>
              <TableHead>
                <TooltipMetric 
                  label="Input Tokens"
                  description="Total number of input tokens sent to the model"
                />
              </TableHead>
              <TableHead>
                <TooltipMetric 
                  label="Output Tokens"
                  description="Total number of output tokens generated by the model"
                />
              </TableHead>
              <TableHead>
                <TooltipMetric 
                  label="Avg Output"
                  description="Average number of output tokens per prompt"
                />
              </TableHead>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200 bg-card">
            {PROMPT_TYPE_ORDER.map((typeName) => {
              const item = promptSummaryMap.get(typeName);
              const title = PROMPT_TYPE_TITLES[typeName] || typeName;
              
              // Skip rendering if the item doesn't exist
              if (!item) return null;

              const modelName = getModelBadgeFromPromptType(typeName);
              const rowDescription = getPromptTypeDescription(typeName);
              const concurrency = concurrencyMap[typeName] || 'N/A';

              return (
                <TooltipProvider key={typeName} delayDuration={300}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <tr className="hover:bg-muted/30 transition-colors cursor-auto">
                        <TableCell className="font-medium">
                          <div>
                            {title}
                            {modelName && <Badge variant="secondary" className="ml-2 text-2xs">{modelName}</Badge>}
                          </div>
                        </TableCell>
                        <TableCell>{item.prompt_type_log_count}</TableCell>
                        <TableCell>{item.total_processing_time_seconds?.toFixed(2) ?? 'N/A'}</TableCell>
                        <TableCell>{item.avg_processing_seconds_per_prompt?.toFixed(2) ?? 'N/A'}</TableCell>
                        <TableCell>{concurrency}</TableCell>
                        <TableCell>{item.total_input_tokens_for_type?.toLocaleString() ?? 'N/A'}</TableCell>
                        <TableCell>{item.total_output_tokens_for_type?.toLocaleString() ?? 'N/A'}</TableCell>
                        <TableCell>{item.avg_output_tokens_per_prompt?.toFixed(2) ?? 'N/A'}</TableCell>
                      </tr>
                    </TooltipTrigger>
                    <TooltipContent side="bottom" className="max-w-xs bg-popover p-3 text-popover-foreground">
                      <div>
                        <h4 className="font-semibold mb-1">{title}</h4>
                        <p className="text-xs text-muted-foreground">{rowDescription}</p>
                      </div>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );
};

// Helper function to get concurrency values for different prompt types
const getConcurrencyMap = (): Record<string, number> => {
  return {
    "component_extraction": EXTRACTION_CONCURRENCY,
    "element_extraction": EXTRACTION_CONCURRENCY,
    "anchoring": EXTRACTION_CONCURRENCY,
    "vlm_labeling": MOONDREAM_CONCURRENCY,
    "accuracy_validation": VALIDATION_CONCURRENCY,
    "metadata_extraction": VALIDATION_CONCURRENCY
  };
};

// Helper component for table heading cells
const TableHead = ({ children, className, ...props }: React.ComponentProps<"th">) => (
  <th 
    scope="col" 
    className={`px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider ${className || ''}`}
    {...props}
  >
    {children}
  </th>
);

// Helper component for table data cells
const TableCell = ({ children, className, ...props }: React.ComponentProps<"td">) => (
  <td 
    className={`px-4 py-3 whitespace-nowrap ${className || ''}`}
    {...props}
  >
    {children}
  </td>
);

// Helper component for tooltip metrics
const TooltipMetric = ({ label, description }: { label: string; description: string }) => {
  return (
    <TooltipProvider delayDuration={300}>
      <Tooltip>
        <TooltipTrigger className="cursor-help flex items-center gap-1">
          {label}
          <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-muted-foreground ml-0.5">
            <circle cx="12" cy="12" r="10"></circle>
            <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path>
            <path d="M12 17h.01"></path>
          </svg>
        </TooltipTrigger>
        <TooltipContent side="top" className="bg-popover p-2 text-popover-foreground max-w-xs">
          <p className="text-xs">{description}</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
};

// Helper function to get model badge from prompt type
const getModelBadgeFromPromptType = (promptType: string): string | null => {
  const modelMap: Record<string, string> = {
    "component_extraction": "OpenAI GPT-4.1",
    "element_extraction": "Claude 3.7",
    "anchoring": "Claude 3.7",
    "vlm_labeling": "Moondream VLM",
    "accuracy_validation": "OpenAI GPT-4.1",
    "metadata_extraction": "OpenAI GPT-4.1"
  };
  
  return modelMap[promptType] || null;
};

// Helper function to get descriptions for prompt types
const getPromptTypeDescription = (promptType: string): string => {
  const descriptionMap: Record<string, string> = {
    "component_extraction": "Identifies high-level UI components from screenshots using OpenAI GPT-4.1. Limited to 3 concurrent operations due to API rate limits.",
    "element_extraction": "Extracts detailed elements within each component using Claude 3.7. Limited to 3 concurrent operations due to API rate limits.",
    "anchoring": "Optimizes element descriptions for better visual detection using Claude 3.7. Limited to 3 concurrent operations due to API rate limits.",
    "vlm_labeling": "Performs visual labeling of UI elements using Moondream VLM. Currently running 10 concurrent operations.",
    "accuracy_validation": "Validates the accuracy of detected elements using OpenAI GPT-4.1. Currently running 10 concurrent operations.",
    "metadata_extraction": "Extracts additional UX metadata from detected elements using OpenAI GPT-4.1. Currently running 10 concurrent operations."
  };
  
  return descriptionMap[promptType] || "Processes data as part of the batch workflow";
}; 